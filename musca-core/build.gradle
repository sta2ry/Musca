plugins {
    id("java")
    id("org.jetbrains.kotlin.jvm") version("${kotlinVersion}")
    id("org.jetbrains.kotlin.plugin.spring") version("${kotlinVersion}")
    id("org.springframework.boot") version("${springBootVersion}")
    id("io.spring.dependency-management") version("${springDepedencyVersion}")
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        mavenBom("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}")
    }
}

configurations {
//    compile.exclude group: "org.springframework.cloud", module: "spring-cloud-starter-netflix-ribbon"
    //Used undertow instead of tomcat
    implementation.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    implementation.exclude group: "org.apache.tomcat"
    implementation.exclude group: "org.apache.tomcat.embed"
    implementation.exclude group: "org.apache.tomcat", module: "tomcat-jdbc"
}

dependencies {
    implementation(project(":musca-spec"))
    implementation(project(":musca-norm"))
    implementation(project(":musca-data"))
//    compile("javax.servlet:javax.servlet-api:${servletVersion}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
//    implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")

    implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery")
    implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config")
    implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-sentinel")
    implementation("com.alibaba.cloud:spring-cloud-starter-dubbo")

    implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")
    implementation("org.springframework.cloud:spring-cloud-starter-openfeign")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-web")
//    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.boot:spring-boot-starter-undertow")
    implementation("org.springframework.boot:spring-boot-starter-data-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-data-redis")

    implementation("com.alibaba.csp:sentinel-datasource-nacos")
//    implementation("io.netty:netty-all:${nettyVersion}")
//    implementation("io.projectreactor.netty:reactor-netty:${reactorNettyVersion}")
    implementation("com.squareup.okhttp3:okhttp:${okHttpVersion}")
    implementation("com.google.guava:guava:${guavaVersion}")

    implementation("org.featx.spec:spec:${featxSpecVersion}")
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
//    testImplementation("io.projectreactor:reactor-test")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "${javaVersion}"
    }
}